syntax = "proto3";

package gopass;

option csharp_namespace= "DecentPass";
option go_package = "../proto";

service Ping {
	  // Ping the server to check if it's alive
  rpc Ping(PingRequest) returns (PingResponse) {}
}

message PingRequest {
  // Optional message to send with the ping
  string message = 1;
}

message PingResponse {
  // Response message
  string message = 1;

  // Timestamp of the ping
  int64 timestamp = 2;

  // Success flag
  bool success = 3;
}

service GopassService {
  // Run a gopass command and get the result
  rpc ExecuteCommand(CommandRequest) returns (CommandResponse) {}
  
  // Run a command and stream the output
  rpc ExecuteCommandStream(CommandRequest) returns (stream CommandOutput) {}
  
  // Interactive command with input and output streams
  rpc ExecuteInteractiveCommand(stream CommandInput) returns (stream CommandOutput) {}
}

message CommandRequest {
  // Command arguments (first element is the gopass subcommand)
  repeated string args = 1;
  
  // Working directory for the command
  string working_dir = 2;
  
  // Environment variables
  map<string, string> env_vars = 3;
  
  // Timeout in seconds (0 means no timeout)
  int32 timeout_seconds = 4;
}

message CommandResponse {
  // Standard output
  string stdout = 1;
  
  // Standard error
  string stderr = 2;
  
  // Exit code (0 means success)
  int32 exit_code = 3;
  
  // Success flag
  bool success = 4;
  
  // Error message if command couldn't be executed
  string error_message = 5;
  
  // Execution time in milliseconds
  int64 execution_time_ms = 6;
}

message CommandOutput {
  // Output data (stdout or stderr)
  bytes data = 1;
  
  // Whether this is from stderr
  bool is_stderr = 2;
  
  // Whether this is the final message
  bool is_final = 3;
  
  // Exit code (only set in final message)
  int32 exit_code = 4;
  
  // Error message (only set in final message)
  string error_message = 5;
}

message CommandInput {
  // Command arguments (only in first message)
  repeated string args = 1;
  
  // Input data to send to process
  bytes input = 2;
  
  // Whether to close stdin after this message
  bool close_stdin = 3;
  
  // Working directory (only in first message)
  string working_dir = 4;
  
  // Environment variables (only in first message)
  map<string, string> env_vars = 5;
  
  // Whether to cancel the command
  bool cancel = 6;
}